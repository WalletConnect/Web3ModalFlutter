// Mocks generated by Mockito 5.4.3 from annotations
// in web3modal_flutter/test/mock_classes.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i14;
import 'dart:convert' as _i26;
import 'dart:typed_data' as _i27;
import 'dart:ui' as _i16;

import 'package:flutter/foundation.dart' as _i2;
import 'package:flutter/material.dart' as _i11;
import 'package:http/http.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:url_launcher/url_launcher.dart' as _i18;
import 'package:walletconnect_flutter_v2/apis/core/relay_client/i_message_tracker.dart'
    as _i7;
import 'package:walletconnect_flutter_v2/apis/core/relay_client/json_rpc_2/src/peer.dart'
    as _i25;
import 'package:walletconnect_flutter_v2/apis/core/relay_client/relay_client.dart'
    as _i24;
import 'package:walletconnect_flutter_v2/apis/core/relay_client/websocket/i_websocket_handler.dart'
    as _i8;
import 'package:walletconnect_flutter_v2/apis/core/store/i_generic_store.dart'
    as _i4;
import 'package:walletconnect_flutter_v2/apis/core/store/i_store.dart' as _i6;
import 'package:walletconnect_flutter_v2/apis/sign_api/i_sessions.dart' as _i5;
import 'package:web3modal_flutter/models/grid_item.dart' as _i29;
import 'package:web3modal_flutter/services/analytics_service/models/analytics_event.dart'
    as _i33;
import 'package:web3modal_flutter/services/blockchain_service/blockchain_service.dart'
    as _i30;
import 'package:web3modal_flutter/services/blockchain_service/models/blockchain_identity.dart'
    as _i10;
import 'package:web3modal_flutter/services/explorer_service/explorer_service.dart'
    as _i12;
import 'package:web3modal_flutter/services/explorer_service/models/redirect.dart'
    as _i19;
import 'package:web3modal_flutter/services/network_service/network_service.dart'
    as _i28;
import 'package:web3modal_flutter/services/storage_service/storage_service.dart'
    as _i31;
import 'package:web3modal_flutter/services/w3m_service/i_w3m_service.dart'
    as _i15;
import 'package:web3modal_flutter/utils/platform/i_platform_utils.dart' as _i20;
import 'package:web3modal_flutter/utils/platform/platform_utils.dart' as _i21;
import 'package:web3modal_flutter/utils/toast/toast_message.dart' as _i23;
import 'package:web3modal_flutter/utils/toast/toast_utils.dart' as _i22;
import 'package:web3modal_flutter/utils/url/url_utils.dart' as _i17;
import 'package:web3modal_flutter/web3modal_flutter.dart' as _i3;
import 'package:web3modal_flutter/widgets/widget_stack/widget_stack.dart'
    as _i32;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValueNotifier_0<T> extends _i1.SmartFake
    implements _i2.ValueNotifier<T> {
  _FakeValueNotifier_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEvent_1<T extends _i3.EventArgs> extends _i1.SmartFake
    implements _i3.Event<T> {
  _FakeEvent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeICore_2 extends _i1.SmartFake implements _i3.ICore {
  _FakeICore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePairingMetadata_3 extends _i1.SmartFake
    implements _i3.PairingMetadata {
  _FakePairingMetadata_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeISignEngine_4 extends _i1.SmartFake implements _i3.ISignEngine {
  _FakeISignEngine_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIAuthEngine_5 extends _i1.SmartFake implements _i3.IAuthEngine {
  _FakeIAuthEngine_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIGenericStore_6<T> extends _i1.SmartFake
    implements _i4.IGenericStore<T> {
  _FakeIGenericStore_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeISessions_7 extends _i1.SmartFake implements _i5.ISessions {
  _FakeISessions_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIPairingStore_8 extends _i1.SmartFake implements _i3.IPairingStore {
  _FakeIPairingStore_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectResponse_9 extends _i1.SmartFake
    implements _i3.ConnectResponse {
  _FakeConnectResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRequestResponse_10 extends _i1.SmartFake
    implements _i3.AuthRequestResponse {
  _FakeAuthRequestResponse_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSessionAuthRequestResponse_11 extends _i1.SmartFake
    implements _i3.SessionAuthRequestResponse {
  _FakeSessionAuthRequestResponse_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIStore_12<T> extends _i1.SmartFake implements _i6.IStore<T> {
  _FakeIStore_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSessionData_13 extends _i1.SmartFake implements _i3.SessionData {
  _FakeSessionData_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIMessageTracker_14 extends _i1.SmartFake
    implements _i7.IMessageTracker {
  _FakeIMessageTracker_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIWebSocketHandler_15 extends _i1.SmartFake
    implements _i8.IWebSocketHandler {
  _FakeIWebSocketHandler_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_16 extends _i1.SmartFake implements _i9.Response {
  _FakeResponse_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_17 extends _i1.SmartFake
    implements _i9.StreamedResponse {
  _FakeStreamedResponse_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBlockchainIdentity_18 extends _i1.SmartFake
    implements _i10.BlockchainIdentity {
  _FakeBlockchainIdentity_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_19 extends _i1.SmartFake implements _i11.Widget {
  _FakeWidget_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [ExplorerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockExplorerService extends _i1.Mock implements _i12.ExplorerService {
  MockExplorerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<bool> get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: _FakeValueNotifier_0<bool>(
          this,
          Invocation.getter(#initialized),
        ),
      ) as _i2.ValueNotifier<bool>);
  @override
  set initialized(_i2.ValueNotifier<bool>? _initialized) => super.noSuchMethod(
        Invocation.setter(
          #initialized,
          _initialized,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ValueNotifier<int> get totalListings => (super.noSuchMethod(
        Invocation.getter(#totalListings),
        returnValue: _FakeValueNotifier_0<int>(
          this,
          Invocation.getter(#totalListings),
        ),
      ) as _i2.ValueNotifier<int>);
  @override
  set totalListings(_i2.ValueNotifier<int>? _totalListings) =>
      super.noSuchMethod(
        Invocation.setter(
          #totalListings,
          _totalListings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ValueNotifier<List<_i3.W3MWalletInfo>> get listings =>
      (super.noSuchMethod(
        Invocation.getter(#listings),
        returnValue: _FakeValueNotifier_0<List<_i3.W3MWalletInfo>>(
          this,
          Invocation.getter(#listings),
        ),
      ) as _i2.ValueNotifier<List<_i3.W3MWalletInfo>>);
  @override
  set listings(_i2.ValueNotifier<List<_i3.W3MWalletInfo>>? _listings) =>
      super.noSuchMethod(
        Invocation.setter(
          #listings,
          _listings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ValueNotifier<bool> get isSearching => (super.noSuchMethod(
        Invocation.getter(#isSearching),
        returnValue: _FakeValueNotifier_0<bool>(
          this,
          Invocation.getter(#isSearching),
        ),
      ) as _i2.ValueNotifier<bool>);
  @override
  set isSearching(_i2.ValueNotifier<bool>? _isSearching) => super.noSuchMethod(
        Invocation.setter(
          #isSearching,
          _isSearching,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set includedWalletIds(Set<String>? _includedWalletIds) => super.noSuchMethod(
        Invocation.setter(
          #includedWalletIds,
          _includedWalletIds,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set excludedWalletIds(Set<String>? _excludedWalletIds) => super.noSuchMethod(
        Invocation.setter(
          #excludedWalletIds,
          _excludedWalletIds,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set featuredWalletIds(Set<String>? _featuredWalletIds) => super.noSuchMethod(
        Invocation.setter(
          #featuredWalletIds,
          _featuredWalletIds,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get projectId => (super.noSuchMethod(
        Invocation.getter(#projectId),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#projectId),
        ),
      ) as String);
  @override
  String get searchValue => (super.noSuchMethod(
        Invocation.getter(#searchValue),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#searchValue),
        ),
      ) as String);
  @override
  bool get canPaginate => (super.noSuchMethod(
        Invocation.getter(#canPaginate),
        returnValue: false,
      ) as bool);
  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> paginate() => (super.noSuchMethod(
        Invocation.method(
          #paginate,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> storeConnectedWallet(_i3.W3MWalletInfo? walletInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeConnectedWallet,
          [walletInfo],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> storeRecentWalletId(String? walletId) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeRecentWalletId,
          [walletId],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  void search({String? query}) => super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {#query: query},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<_i3.W3MWalletInfo?> getCoinbaseWalletObject() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoinbaseWalletObject,
          [],
        ),
        returnValue: _i14.Future<_i3.W3MWalletInfo?>.value(),
      ) as _i14.Future<_i3.W3MWalletInfo?>);
  @override
  String getWalletImageUrl(String? imageId) => (super.noSuchMethod(
        Invocation.method(
          #getWalletImageUrl,
          [imageId],
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #getWalletImageUrl,
            [imageId],
          ),
        ),
      ) as String);
  @override
  String getAssetImageUrl(String? imageId) => (super.noSuchMethod(
        Invocation.method(
          #getAssetImageUrl,
          [imageId],
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #getAssetImageUrl,
            [imageId],
          ),
        ),
      ) as String);
}

/// A class which mocks [W3MService].
///
/// See the documentation for Mockito's code generation for more information.
class MockW3MService extends _i1.Mock implements _i3.W3MService {
  MockW3MService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<String> get balanceNotifier => (super.noSuchMethod(
        Invocation.getter(#balanceNotifier),
        returnValue: _FakeValueNotifier_0<String>(
          this,
          Invocation.getter(#balanceNotifier),
        ),
      ) as _i2.ValueNotifier<String>);
  @override
  _i3.Event<_i3.ModalConnect> get onModalConnect => (super.noSuchMethod(
        Invocation.getter(#onModalConnect),
        returnValue: _FakeEvent_1<_i3.ModalConnect>(
          this,
          Invocation.getter(#onModalConnect),
        ),
      ) as _i3.Event<_i3.ModalConnect>);
  @override
  _i3.Event<_i3.ModalConnect> get onModalUpdate => (super.noSuchMethod(
        Invocation.getter(#onModalUpdate),
        returnValue: _FakeEvent_1<_i3.ModalConnect>(
          this,
          Invocation.getter(#onModalUpdate),
        ),
      ) as _i3.Event<_i3.ModalConnect>);
  @override
  _i3.Event<_i3.ModalNetworkChange> get onModalNetworkChange =>
      (super.noSuchMethod(
        Invocation.getter(#onModalNetworkChange),
        returnValue: _FakeEvent_1<_i3.ModalNetworkChange>(
          this,
          Invocation.getter(#onModalNetworkChange),
        ),
      ) as _i3.Event<_i3.ModalNetworkChange>);
  @override
  _i3.Event<_i3.ModalDisconnect> get onModalDisconnect => (super.noSuchMethod(
        Invocation.getter(#onModalDisconnect),
        returnValue: _FakeEvent_1<_i3.ModalDisconnect>(
          this,
          Invocation.getter(#onModalDisconnect),
        ),
      ) as _i3.Event<_i3.ModalDisconnect>);
  @override
  _i3.Event<_i3.ModalError> get onModalError => (super.noSuchMethod(
        Invocation.getter(#onModalError),
        returnValue: _FakeEvent_1<_i3.ModalError>(
          this,
          Invocation.getter(#onModalError),
        ),
      ) as _i3.Event<_i3.ModalError>);
  @override
  _i3.Event<_i3.SessionExpire> get onSessionExpireEvent => (super.noSuchMethod(
        Invocation.getter(#onSessionExpireEvent),
        returnValue: _FakeEvent_1<_i3.SessionExpire>(
          this,
          Invocation.getter(#onSessionExpireEvent),
        ),
      ) as _i3.Event<_i3.SessionExpire>);
  @override
  _i3.Event<_i3.SessionUpdate> get onSessionUpdateEvent => (super.noSuchMethod(
        Invocation.getter(#onSessionUpdateEvent),
        returnValue: _FakeEvent_1<_i3.SessionUpdate>(
          this,
          Invocation.getter(#onSessionUpdateEvent),
        ),
      ) as _i3.Event<_i3.SessionUpdate>);
  @override
  _i3.Event<_i3.SessionEvent> get onSessionEventEvent => (super.noSuchMethod(
        Invocation.getter(#onSessionEventEvent),
        returnValue: _FakeEvent_1<_i3.SessionEvent>(
          this,
          Invocation.getter(#onSessionEventEvent),
        ),
      ) as _i3.Event<_i3.SessionEvent>);
  @override
  _i15.W3MServiceStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i15.W3MServiceStatus.idle,
      ) as _i15.W3MServiceStatus);
  @override
  bool get hasNamespaces => (super.noSuchMethod(
        Invocation.getter(#hasNamespaces),
        returnValue: false,
      ) as bool);
  @override
  String get chainBalance => (super.noSuchMethod(
        Invocation.getter(#chainBalance),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#chainBalance),
        ),
      ) as String);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> selectChain(
    _i3.W3MChainInfo? chainInfo, {
    bool? switchChain = false,
    bool? logEvent = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #selectChain,
          [chainInfo],
          {
            #switchChain: switchChain,
            #logEvent: logEvent,
          },
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> openNetworks(_i11.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #openNetworks,
          [context],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> openNetworksView() => (super.noSuchMethod(
        Invocation.method(
          #openNetworksView,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> openModal(
    _i11.BuildContext? context, [
    _i11.Widget? startWidget,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openModal,
          [
            context,
            startWidget,
          ],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> openModalView([_i11.Widget? startWidget]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openModalView,
          [startWidget],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> expirePreviousInactivePairings() => (super.noSuchMethod(
        Invocation.method(
          #expirePreviousInactivePairings,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> connectSelectedWallet({bool? inBrowser = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #connectSelectedWallet,
          [],
          {#inBrowser: inBrowser},
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> buildConnectionUri() => (super.noSuchMethod(
        Invocation.method(
          #buildConnectionUri,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  void launchConnectedWallet() => super.noSuchMethod(
        Invocation.method(
          #launchConnectedWallet,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> reconnectRelay() => (super.noSuchMethod(
        Invocation.method(
          #reconnectRelay,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> disconnect({bool? disconnectAllSessions = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
          {#disconnectAllSessions: disconnectAllSessions},
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  void closeModal({bool? disconnectSession = false}) => super.noSuchMethod(
        Invocation.method(
          #closeModal,
          [],
          {#disconnectSession: disconnectSession},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void selectWallet(_i3.W3MWalletInfo? walletInfo) => super.noSuchMethod(
        Invocation.method(
          #selectWallet,
          [walletInfo],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void launchBlockExplorer() => super.noSuchMethod(
        Invocation.method(
          #launchBlockExplorer,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<List<dynamic>> requestReadContract({
    required _i3.DeployedContract? deployedContract,
    required String? functionName,
    List<dynamic>? parameters = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestReadContract,
          [],
          {
            #deployedContract: deployedContract,
            #functionName: functionName,
            #parameters: parameters,
          },
        ),
        returnValue: _i14.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i14.Future<List<dynamic>>);
  @override
  _i14.Future<dynamic> requestWriteContract({
    required String? topic,
    required String? chainId,
    required _i3.DeployedContract? deployedContract,
    required String? functionName,
    required _i3.Transaction? transaction,
    String? method,
    List<dynamic>? parameters = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestWriteContract,
          [],
          {
            #topic: topic,
            #chainId: chainId,
            #deployedContract: deployedContract,
            #functionName: functionName,
            #transaction: transaction,
            #method: method,
            #parameters: parameters,
          },
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<dynamic> request({
    required String? topic,
    required String? chainId,
    required _i3.SessionRequestParams? request,
    String? switchToChainId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [],
          {
            #topic: topic,
            #chainId: chainId,
            #request: request,
            #switchToChainId: switchToChainId,
          },
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> loadAccountData() => (super.noSuchMethod(
        Invocation.method(
          #loadAccountData,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> requestSwitchToChain(_i3.W3MChainInfo? newChain) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestSwitchToChain,
          [newChain],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> requestAddChain(_i3.W3MChainInfo? newChain) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestAddChain,
          [newChain],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  void addListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UrlUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockUrlUtils extends _i1.Mock implements _i17.UrlUtils {
  MockUrlUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<bool> Function(String) get androidAppCheck => (super.noSuchMethod(
        Invocation.getter(#androidAppCheck),
        returnValue: (String uri) => _i14.Future<bool>.value(false),
      ) as _i14.Future<bool> Function(String));
  @override
  _i14.Future<bool> Function(
    Uri, {
    _i18.LaunchMode? mode,
  }) get launchUrlFunc => (super.noSuchMethod(
        Invocation.getter(#launchUrlFunc),
        returnValue: (
          Uri url, {
          _i18.LaunchMode? mode,
        }) =>
            _i14.Future<bool>.value(false),
      ) as _i14.Future<bool> Function(
        Uri, {
        _i18.LaunchMode? mode,
      }));
  @override
  _i14.Future<bool> Function(Uri) get canLaunchUrlFunc => (super.noSuchMethod(
        Invocation.getter(#canLaunchUrlFunc),
        returnValue: (Uri url) => _i14.Future<bool>.value(false),
      ) as _i14.Future<bool> Function(Uri));
  @override
  _i14.Future<bool> isInstalled(
    String? uri, {
    String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isInstalled,
          [uri],
          {#id: id},
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  _i14.Future<bool> launchUrl(
    Uri? url, {
    _i18.LaunchMode? mode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #launchUrl,
          [url],
          {#mode: mode},
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  _i14.Future<bool> openRedirect(
    _i19.WalletRedirect? redirect, {
    String? wcURI,
    _i20.PlatformType? pType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRedirect,
          [redirect],
          {
            #wcURI: wcURI,
            #pType: pType,
          },
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
}

/// A class which mocks [PlatformUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformUtils extends _i1.Mock implements _i21.PlatformUtils {
  MockPlatformUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.PlatformExact getPlatformExact() => (super.noSuchMethod(
        Invocation.method(
          #getPlatformExact,
          [],
        ),
        returnValue: _i20.PlatformExact.iOS,
      ) as _i20.PlatformExact);
  @override
  _i20.PlatformType getPlatformType() => (super.noSuchMethod(
        Invocation.method(
          #getPlatformType,
          [],
        ),
        returnValue: _i20.PlatformType.mobile,
      ) as _i20.PlatformType);
  @override
  bool canDetectInstalledApps() => (super.noSuchMethod(
        Invocation.method(
          #canDetectInstalledApps,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool isBottomSheet() => (super.noSuchMethod(
        Invocation.method(
          #isBottomSheet,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool isLongBottomSheet(_i11.Orientation? orientation) => (super.noSuchMethod(
        Invocation.method(
          #isLongBottomSheet,
          [orientation],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool isMobileWidth(double? width) => (super.noSuchMethod(
        Invocation.method(
          #isMobileWidth,
          [width],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool isTablet(_i11.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #isTablet,
          [context],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ToastUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockToastUtils extends _i1.Mock implements _i22.ToastUtils {
  MockToastUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Stream<_i23.ToastMessage?> get toasts => (super.noSuchMethod(
        Invocation.getter(#toasts),
        returnValue: _i14.Stream<_i23.ToastMessage?>.empty(),
      ) as _i14.Stream<_i23.ToastMessage?>);
  @override
  void show(_i23.ToastMessage? message) => super.noSuchMethod(
        Invocation.method(
          #show,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Web3App].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeb3App extends _i1.Mock implements _i3.Web3App {
  MockWeb3App() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get protocol => (super.noSuchMethod(
        Invocation.getter(#protocol),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#protocol),
        ),
      ) as String);
  @override
  int get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: 0,
      ) as int);
  @override
  _i3.ICore get core => (super.noSuchMethod(
        Invocation.getter(#core),
        returnValue: _FakeICore_2(
          this,
          Invocation.getter(#core),
        ),
      ) as _i3.ICore);
  @override
  _i3.PairingMetadata get metadata => (super.noSuchMethod(
        Invocation.getter(#metadata),
        returnValue: _FakePairingMetadata_3(
          this,
          Invocation.getter(#metadata),
        ),
      ) as _i3.PairingMetadata);
  @override
  _i3.ISignEngine get signEngine => (super.noSuchMethod(
        Invocation.getter(#signEngine),
        returnValue: _FakeISignEngine_4(
          this,
          Invocation.getter(#signEngine),
        ),
      ) as _i3.ISignEngine);
  @override
  set signEngine(_i3.ISignEngine? _signEngine) => super.noSuchMethod(
        Invocation.setter(
          #signEngine,
          _signEngine,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.IAuthEngine get authEngine => (super.noSuchMethod(
        Invocation.getter(#authEngine),
        returnValue: _FakeIAuthEngine_5(
          this,
          Invocation.getter(#authEngine),
        ),
      ) as _i3.IAuthEngine);
  @override
  set authEngine(_i3.IAuthEngine? _authEngine) => super.noSuchMethod(
        Invocation.setter(
          #authEngine,
          _authEngine,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Event<_i3.SessionConnect> get onSessionConnect => (super.noSuchMethod(
        Invocation.getter(#onSessionConnect),
        returnValue: _FakeEvent_1<_i3.SessionConnect>(
          this,
          Invocation.getter(#onSessionConnect),
        ),
      ) as _i3.Event<_i3.SessionConnect>);
  @override
  _i3.Event<_i3.SessionEvent> get onSessionEvent => (super.noSuchMethod(
        Invocation.getter(#onSessionEvent),
        returnValue: _FakeEvent_1<_i3.SessionEvent>(
          this,
          Invocation.getter(#onSessionEvent),
        ),
      ) as _i3.Event<_i3.SessionEvent>);
  @override
  _i3.Event<_i3.SessionExpire> get onSessionExpire => (super.noSuchMethod(
        Invocation.getter(#onSessionExpire),
        returnValue: _FakeEvent_1<_i3.SessionExpire>(
          this,
          Invocation.getter(#onSessionExpire),
        ),
      ) as _i3.Event<_i3.SessionExpire>);
  @override
  _i3.Event<_i3.SessionProposalEvent> get onProposalExpire =>
      (super.noSuchMethod(
        Invocation.getter(#onProposalExpire),
        returnValue: _FakeEvent_1<_i3.SessionProposalEvent>(
          this,
          Invocation.getter(#onProposalExpire),
        ),
      ) as _i3.Event<_i3.SessionProposalEvent>);
  @override
  _i3.Event<_i3.SessionExtend> get onSessionExtend => (super.noSuchMethod(
        Invocation.getter(#onSessionExtend),
        returnValue: _FakeEvent_1<_i3.SessionExtend>(
          this,
          Invocation.getter(#onSessionExtend),
        ),
      ) as _i3.Event<_i3.SessionExtend>);
  @override
  _i3.Event<_i3.SessionPing> get onSessionPing => (super.noSuchMethod(
        Invocation.getter(#onSessionPing),
        returnValue: _FakeEvent_1<_i3.SessionPing>(
          this,
          Invocation.getter(#onSessionPing),
        ),
      ) as _i3.Event<_i3.SessionPing>);
  @override
  _i3.Event<_i3.SessionUpdate> get onSessionUpdate => (super.noSuchMethod(
        Invocation.getter(#onSessionUpdate),
        returnValue: _FakeEvent_1<_i3.SessionUpdate>(
          this,
          Invocation.getter(#onSessionUpdate),
        ),
      ) as _i3.Event<_i3.SessionUpdate>);
  @override
  _i3.Event<_i3.SessionDelete> get onSessionDelete => (super.noSuchMethod(
        Invocation.getter(#onSessionDelete),
        returnValue: _FakeEvent_1<_i3.SessionDelete>(
          this,
          Invocation.getter(#onSessionDelete),
        ),
      ) as _i3.Event<_i3.SessionDelete>);
  @override
  _i4.IGenericStore<_i3.ProposalData> get proposals => (super.noSuchMethod(
        Invocation.getter(#proposals),
        returnValue: _FakeIGenericStore_6<_i3.ProposalData>(
          this,
          Invocation.getter(#proposals),
        ),
      ) as _i4.IGenericStore<_i3.ProposalData>);
  @override
  _i5.ISessions get sessions => (super.noSuchMethod(
        Invocation.getter(#sessions),
        returnValue: _FakeISessions_7(
          this,
          Invocation.getter(#sessions),
        ),
      ) as _i5.ISessions);
  @override
  _i4.IGenericStore<_i3.SessionRequest> get pendingRequests =>
      (super.noSuchMethod(
        Invocation.getter(#pendingRequests),
        returnValue: _FakeIGenericStore_6<_i3.SessionRequest>(
          this,
          Invocation.getter(#pendingRequests),
        ),
      ) as _i4.IGenericStore<_i3.SessionRequest>);
  @override
  _i3.IPairingStore get pairings => (super.noSuchMethod(
        Invocation.getter(#pairings),
        returnValue: _FakeIPairingStore_8(
          this,
          Invocation.getter(#pairings),
        ),
      ) as _i3.IPairingStore);
  @override
  _i3.Event<_i3.AuthResponse> get onAuthResponse => (super.noSuchMethod(
        Invocation.getter(#onAuthResponse),
        returnValue: _FakeEvent_1<_i3.AuthResponse>(
          this,
          Invocation.getter(#onAuthResponse),
        ),
      ) as _i3.Event<_i3.AuthResponse>);
  @override
  _i4.IGenericStore<_i3.AuthPublicKey> get authKeys => (super.noSuchMethod(
        Invocation.getter(#authKeys),
        returnValue: _FakeIGenericStore_6<_i3.AuthPublicKey>(
          this,
          Invocation.getter(#authKeys),
        ),
      ) as _i4.IGenericStore<_i3.AuthPublicKey>);
  @override
  _i4.IGenericStore<String> get pairingTopics => (super.noSuchMethod(
        Invocation.getter(#pairingTopics),
        returnValue: _FakeIGenericStore_6<String>(
          this,
          Invocation.getter(#pairingTopics),
        ),
      ) as _i4.IGenericStore<String>);
  @override
  _i4.IGenericStore<_i3.StoredCacao> get completeRequests =>
      (super.noSuchMethod(
        Invocation.getter(#completeRequests),
        returnValue: _FakeIGenericStore_6<_i3.StoredCacao>(
          this,
          Invocation.getter(#completeRequests),
        ),
      ) as _i4.IGenericStore<_i3.StoredCacao>);
  @override
  _i3.Event<_i3.SessionAuthResponse> get onSessionAuthResponse =>
      (super.noSuchMethod(
        Invocation.getter(#onSessionAuthResponse),
        returnValue: _FakeEvent_1<_i3.SessionAuthResponse>(
          this,
          Invocation.getter(#onSessionAuthResponse),
        ),
      ) as _i3.Event<_i3.SessionAuthResponse>);
  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<_i3.ConnectResponse> connect({
    Map<String, _i3.RequiredNamespace>? requiredNamespaces,
    Map<String, _i3.RequiredNamespace>? optionalNamespaces,
    Map<String, String>? sessionProperties,
    String? pairingTopic,
    List<_i3.Relay>? relays,
    List<List<String>>? methods = const [
      [
        r'wc_sessionPropose',
        r'wc_sessionRequest',
      ],
      [r'wc_authRequest'],
    ],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {
            #requiredNamespaces: requiredNamespaces,
            #optionalNamespaces: optionalNamespaces,
            #sessionProperties: sessionProperties,
            #pairingTopic: pairingTopic,
            #relays: relays,
            #methods: methods,
          },
        ),
        returnValue:
            _i14.Future<_i3.ConnectResponse>.value(_FakeConnectResponse_9(
          this,
          Invocation.method(
            #connect,
            [],
            {
              #requiredNamespaces: requiredNamespaces,
              #optionalNamespaces: optionalNamespaces,
              #sessionProperties: sessionProperties,
              #pairingTopic: pairingTopic,
              #relays: relays,
              #methods: methods,
            },
          ),
        )),
      ) as _i14.Future<_i3.ConnectResponse>);
  @override
  _i14.Future<dynamic> request({
    required String? topic,
    required String? chainId,
    required _i3.SessionRequestParams? request,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [],
          {
            #topic: topic,
            #chainId: chainId,
            #request: request,
          },
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  _i14.Future<List<dynamic>> requestReadContract({
    required _i3.DeployedContract? deployedContract,
    required String? functionName,
    required String? rpcUrl,
    _i3.EthereumAddress? sender,
    List<dynamic>? parameters = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestReadContract,
          [],
          {
            #deployedContract: deployedContract,
            #functionName: functionName,
            #rpcUrl: rpcUrl,
            #sender: sender,
            #parameters: parameters,
          },
        ),
        returnValue: _i14.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i14.Future<List<dynamic>>);
  @override
  _i14.Future<dynamic> requestWriteContract({
    required String? topic,
    required String? chainId,
    required String? rpcUrl,
    required _i3.DeployedContract? deployedContract,
    required String? functionName,
    required _i3.Transaction? transaction,
    String? method,
    List<dynamic>? parameters = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestWriteContract,
          [],
          {
            #topic: topic,
            #chainId: chainId,
            #rpcUrl: rpcUrl,
            #deployedContract: deployedContract,
            #functionName: functionName,
            #transaction: transaction,
            #method: method,
            #parameters: parameters,
          },
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
  @override
  void registerEventHandler({
    required String? chainId,
    required String? event,
    void Function(
      String,
      dynamic,
    )? handler,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerEventHandler,
          [],
          {
            #chainId: chainId,
            #event: event,
            #handler: handler,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> ping({required String? topic}) => (super.noSuchMethod(
        Invocation.method(
          #ping,
          [],
          {#topic: topic},
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> disconnectSession({
    required String? topic,
    required _i3.WalletConnectError? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #disconnectSession,
          [],
          {
            #topic: topic,
            #reason: reason,
          },
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  Map<String, _i3.SessionData> getActiveSessions() => (super.noSuchMethod(
        Invocation.method(
          #getActiveSessions,
          [],
        ),
        returnValue: <String, _i3.SessionData>{},
      ) as Map<String, _i3.SessionData>);
  @override
  Map<String, _i3.SessionData> getSessionsForPairing(
          {required String? pairingTopic}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSessionsForPairing,
          [],
          {#pairingTopic: pairingTopic},
        ),
        returnValue: <String, _i3.SessionData>{},
      ) as Map<String, _i3.SessionData>);
  @override
  Map<String, _i3.ProposalData> getPendingSessionProposals() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingSessionProposals,
          [],
        ),
        returnValue: <String, _i3.ProposalData>{},
      ) as Map<String, _i3.ProposalData>);
  @override
  _i14.Future<_i3.AuthRequestResponse> requestAuth({
    required _i3.AuthRequestParams? params,
    String? pairingTopic,
    List<List<String>>? methods = const [
      [
        r'wc_sessionPropose',
        r'wc_sessionRequest',
      ],
      [r'wc_authRequest'],
    ],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestAuth,
          [],
          {
            #params: params,
            #pairingTopic: pairingTopic,
            #methods: methods,
          },
        ),
        returnValue: _i14.Future<_i3.AuthRequestResponse>.value(
            _FakeAuthRequestResponse_10(
          this,
          Invocation.method(
            #requestAuth,
            [],
            {
              #params: params,
              #pairingTopic: pairingTopic,
              #methods: methods,
            },
          ),
        )),
      ) as _i14.Future<_i3.AuthRequestResponse>);
  @override
  Map<int, _i3.StoredCacao> getCompletedRequestsForPairing(
          {required String? pairingTopic}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCompletedRequestsForPairing,
          [],
          {#pairingTopic: pairingTopic},
        ),
        returnValue: <int, _i3.StoredCacao>{},
      ) as Map<int, _i3.StoredCacao>);
  @override
  _i14.Future<_i3.SessionAuthRequestResponse> authenticate({
    required _i3.SessionAuthRequestParams? params,
    String? pairingTopic,
    List<List<String>>? methods = const [
      [r'wc_sessionAuthenticate']
    ],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
          {
            #params: params,
            #pairingTopic: pairingTopic,
            #methods: methods,
          },
        ),
        returnValue: _i14.Future<_i3.SessionAuthRequestResponse>.value(
            _FakeSessionAuthRequestResponse_11(
          this,
          Invocation.method(
            #authenticate,
            [],
            {
              #params: params,
              #pairingTopic: pairingTopic,
              #methods: methods,
            },
          ),
        )),
      ) as _i14.Future<_i3.SessionAuthRequestResponse>);
  @override
  _i14.Future<bool> validateSignedCacao({
    required _i3.Cacao? cacao,
    required String? projectId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateSignedCacao,
          [],
          {
            #cacao: cacao,
            #projectId: projectId,
          },
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  String formatAuthMessage({
    required String? iss,
    required _i3.CacaoRequestPayload? cacaoPayload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #formatAuthMessage,
          [],
          {
            #iss: iss,
            #cacaoPayload: cacaoPayload,
          },
        ),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.method(
            #formatAuthMessage,
            [],
            {
              #iss: iss,
              #cacaoPayload: cacaoPayload,
            },
          ),
        ),
      ) as String);
}

/// A class which mocks [Sessions].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessions extends _i1.Mock implements _i3.Sessions {
  MockSessions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#context),
        ),
      ) as String);
  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);
  @override
  _i6.IStore<dynamic> get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeIStore_12<dynamic>(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i6.IStore<dynamic>);
  @override
  _i3.Event<_i3.StoreCreateEvent<_i3.SessionData>> get onCreate =>
      (super.noSuchMethod(
        Invocation.getter(#onCreate),
        returnValue: _FakeEvent_1<_i3.StoreCreateEvent<_i3.SessionData>>(
          this,
          Invocation.getter(#onCreate),
        ),
      ) as _i3.Event<_i3.StoreCreateEvent<_i3.SessionData>>);
  @override
  _i3.Event<_i3.StoreUpdateEvent<_i3.SessionData>> get onUpdate =>
      (super.noSuchMethod(
        Invocation.getter(#onUpdate),
        returnValue: _FakeEvent_1<_i3.StoreUpdateEvent<_i3.SessionData>>(
          this,
          Invocation.getter(#onUpdate),
        ),
      ) as _i3.Event<_i3.StoreUpdateEvent<_i3.SessionData>>);
  @override
  _i3.Event<_i3.StoreDeleteEvent<_i3.SessionData>> get onDelete =>
      (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeEvent_1<_i3.StoreDeleteEvent<_i3.SessionData>>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i3.Event<_i3.StoreDeleteEvent<_i3.SessionData>>);
  @override
  _i3.Event<_i3.StoreSyncEvent> get onSync => (super.noSuchMethod(
        Invocation.getter(#onSync),
        returnValue: _FakeEvent_1<_i3.StoreSyncEvent>(
          this,
          Invocation.getter(#onSync),
        ),
      ) as _i3.Event<_i3.StoreSyncEvent>);
  @override
  Map<String, _i3.SessionData> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, _i3.SessionData>{},
      ) as Map<String, _i3.SessionData>);
  @override
  set data(Map<String, _i3.SessionData>? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.SessionData Function(dynamic) get fromJson => (super.noSuchMethod(
        Invocation.getter(#fromJson),
        returnValue: (dynamic __p0) => _FakeSessionData_13(
          this,
          Invocation.getter(#fromJson),
        ),
      ) as _i3.SessionData Function(dynamic));
  @override
  String get storageKey => (super.noSuchMethod(
        Invocation.getter(#storageKey),
        returnValue: _i13.dummyValue<String>(
          this,
          Invocation.getter(#storageKey),
        ),
      ) as String);
  @override
  _i14.Future<void> update(
    String? topic, {
    int? expiry,
    Map<String, _i3.Namespace>? namespaces,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [topic],
          {
            #expiry: expiry,
            #namespaces: namespaces,
          },
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  bool has(String? key) => (super.noSuchMethod(
        Invocation.method(
          #has,
          [key],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i3.SessionData? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as _i3.SessionData?);
  @override
  List<_i3.SessionData> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i3.SessionData>[],
      ) as List<_i3.SessionData>);
  @override
  _i14.Future<void> set(
    String? key,
    _i3.SessionData? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            key,
            value,
          ],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> persist() => (super.noSuchMethod(
        Invocation.method(
          #persist,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> restore() => (super.noSuchMethod(
        Invocation.method(
          #restore,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  void checkInitialized() => super.noSuchMethod(
        Invocation.method(
          #checkInitialized,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RelayClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockRelayClient extends _i1.Mock implements _i24.RelayClient {
  MockRelayClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Event<_i3.EventArgs> get onRelayClientConnect => (super.noSuchMethod(
        Invocation.getter(#onRelayClientConnect),
        returnValue: _FakeEvent_1<_i3.EventArgs>(
          this,
          Invocation.getter(#onRelayClientConnect),
        ),
      ) as _i3.Event<_i3.EventArgs>);
  @override
  _i3.Event<_i3.EventArgs> get onRelayClientDisconnect => (super.noSuchMethod(
        Invocation.getter(#onRelayClientDisconnect),
        returnValue: _FakeEvent_1<_i3.EventArgs>(
          this,
          Invocation.getter(#onRelayClientDisconnect),
        ),
      ) as _i3.Event<_i3.EventArgs>);
  @override
  _i3.Event<_i3.ErrorEvent> get onRelayClientError => (super.noSuchMethod(
        Invocation.getter(#onRelayClientError),
        returnValue: _FakeEvent_1<_i3.ErrorEvent>(
          this,
          Invocation.getter(#onRelayClientError),
        ),
      ) as _i3.Event<_i3.ErrorEvent>);
  @override
  _i3.Event<_i3.MessageEvent> get onRelayClientMessage => (super.noSuchMethod(
        Invocation.getter(#onRelayClientMessage),
        returnValue: _FakeEvent_1<_i3.MessageEvent>(
          this,
          Invocation.getter(#onRelayClientMessage),
        ),
      ) as _i3.Event<_i3.MessageEvent>);
  @override
  _i3.Event<_i3.SubscriptionEvent> get onSubscriptionCreated =>
      (super.noSuchMethod(
        Invocation.getter(#onSubscriptionCreated),
        returnValue: _FakeEvent_1<_i3.SubscriptionEvent>(
          this,
          Invocation.getter(#onSubscriptionCreated),
        ),
      ) as _i3.Event<_i3.SubscriptionEvent>);
  @override
  _i3.Event<_i3.SubscriptionDeletionEvent> get onSubscriptionDeleted =>
      (super.noSuchMethod(
        Invocation.getter(#onSubscriptionDeleted),
        returnValue: _FakeEvent_1<_i3.SubscriptionDeletionEvent>(
          this,
          Invocation.getter(#onSubscriptionDeleted),
        ),
      ) as _i3.Event<_i3.SubscriptionDeletionEvent>);
  @override
  _i3.Event<_i3.EventArgs> get onSubscriptionResubscribed =>
      (super.noSuchMethod(
        Invocation.getter(#onSubscriptionResubscribed),
        returnValue: _FakeEvent_1<_i3.EventArgs>(
          this,
          Invocation.getter(#onSubscriptionResubscribed),
        ),
      ) as _i3.Event<_i3.EventArgs>);
  @override
  _i3.Event<_i3.EventArgs> get onSubscriptionSync => (super.noSuchMethod(
        Invocation.getter(#onSubscriptionSync),
        returnValue: _FakeEvent_1<_i3.EventArgs>(
          this,
          Invocation.getter(#onSubscriptionSync),
        ),
      ) as _i3.Event<_i3.EventArgs>);
  @override
  set jsonRPC(_i25.Peer? _jsonRPC) => super.noSuchMethod(
        Invocation.setter(
          #jsonRPC,
          _jsonRPC,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i14.Future<dynamic>> get pendingSubscriptions =>
      (super.noSuchMethod(
        Invocation.getter(#pendingSubscriptions),
        returnValue: <String, _i14.Future<dynamic>>{},
      ) as Map<String, _i14.Future<dynamic>>);
  @override
  set pendingSubscriptions(
          Map<String, _i14.Future<dynamic>>? _pendingSubscriptions) =>
      super.noSuchMethod(
        Invocation.setter(
          #pendingSubscriptions,
          _pendingSubscriptions,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.IMessageTracker get messageTracker => (super.noSuchMethod(
        Invocation.getter(#messageTracker),
        returnValue: _FakeIMessageTracker_14(
          this,
          Invocation.getter(#messageTracker),
        ),
      ) as _i7.IMessageTracker);
  @override
  set messageTracker(_i7.IMessageTracker? _messageTracker) =>
      super.noSuchMethod(
        Invocation.setter(
          #messageTracker,
          _messageTracker,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.IGenericStore<String> get topicMap => (super.noSuchMethod(
        Invocation.getter(#topicMap),
        returnValue: _FakeIGenericStore_6<String>(
          this,
          Invocation.getter(#topicMap),
        ),
      ) as _i4.IGenericStore<String>);
  @override
  set topicMap(_i4.IGenericStore<String>? _topicMap) => super.noSuchMethod(
        Invocation.setter(
          #topicMap,
          _topicMap,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.IWebSocketHandler get socketHandler => (super.noSuchMethod(
        Invocation.getter(#socketHandler),
        returnValue: _FakeIWebSocketHandler_15(
          this,
          Invocation.getter(#socketHandler),
        ),
      ) as _i8.IWebSocketHandler);
  @override
  _i3.ICore get core => (super.noSuchMethod(
        Invocation.getter(#core),
        returnValue: _FakeICore_2(
          this,
          Invocation.getter(#core),
        ),
      ) as _i3.ICore);
  @override
  set core(_i3.ICore? _core) => super.noSuchMethod(
        Invocation.setter(
          #core,
          _core,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> publish({
    required String? topic,
    required String? message,
    required int? ttl,
    required int? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publish,
          [],
          {
            #topic: topic,
            #message: message,
            #ttl: ttl,
            #tag: tag,
          },
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<String> subscribe({required String? topic}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
          {#topic: topic},
        ),
        returnValue: _i14.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #subscribe,
            [],
            {#topic: topic},
          ),
        )),
      ) as _i14.Future<String>);
  @override
  _i14.Future<void> unsubscribe({required String? topic}) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [],
          {#topic: topic},
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> connect({String? relayUrl}) => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
          {#relayUrl: relayUrl},
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<bool> handlePublish(
    String? topic,
    String? message,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handlePublish,
          [
            topic,
            message,
          ],
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i9.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<_i9.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<_i9.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i14.Future<_i9.Response>);
  @override
  _i14.Future<_i9.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<_i9.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i14.Future<_i9.Response>);
  @override
  _i14.Future<_i9.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i26.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i9.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i9.Response>);
  @override
  _i14.Future<_i9.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i26.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i9.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i9.Response>);
  @override
  _i14.Future<_i9.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i26.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i9.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i9.Response>);
  @override
  _i14.Future<_i9.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i26.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i14.Future<_i9.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i14.Future<_i9.Response>);
  @override
  _i14.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i14.Future<String>);
  @override
  _i14.Future<_i27.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i14.Future<_i27.Uint8List>.value(_i27.Uint8List(0)),
      ) as _i14.Future<_i27.Uint8List>);
  @override
  _i14.Future<_i9.StreamedResponse> send(_i9.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i14.Future<_i9.StreamedResponse>.value(_FakeStreamedResponse_17(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i14.Future<_i9.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i28.NetworkService {
  MockNetworkService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<bool> get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: _FakeValueNotifier_0<bool>(
          this,
          Invocation.getter(#initialized),
        ),
      ) as _i2.ValueNotifier<bool>);
  @override
  set initialized(_i2.ValueNotifier<bool>? _initialized) => super.noSuchMethod(
        Invocation.setter(
          #initialized,
          _initialized,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i29.GridItem<_i3.W3MChainInfo>> get itemListComplete =>
      (super.noSuchMethod(
        Invocation.getter(#itemListComplete),
        returnValue: <_i29.GridItem<_i3.W3MChainInfo>>[],
      ) as List<_i29.GridItem<_i3.W3MChainInfo>>);
  @override
  set itemListComplete(
          List<_i29.GridItem<_i3.W3MChainInfo>>? _itemListComplete) =>
      super.noSuchMethod(
        Invocation.setter(
          #itemListComplete,
          _itemListComplete,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ValueNotifier<List<_i29.GridItem<_i3.W3MChainInfo>>> get itemList =>
      (super.noSuchMethod(
        Invocation.getter(#itemList),
        returnValue:
            _FakeValueNotifier_0<List<_i29.GridItem<_i3.W3MChainInfo>>>(
          this,
          Invocation.getter(#itemList),
        ),
      ) as _i2.ValueNotifier<List<_i29.GridItem<_i3.W3MChainInfo>>>);
  @override
  set itemList(
          _i2.ValueNotifier<List<_i29.GridItem<_i3.W3MChainInfo>>>?
              _itemList) =>
      super.noSuchMethod(
        Invocation.setter(
          #itemList,
          _itemList,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  void filterList({String? query}) => super.noSuchMethod(
        Invocation.method(
          #filterList,
          [],
          {#query: query},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BlockChainService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlockChainService extends _i1.Mock implements _i30.BlockChainService {
  MockBlockChainService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<_i10.BlockchainIdentity> getIdentity(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIdentity,
          [address],
        ),
        returnValue: _i14.Future<_i10.BlockchainIdentity>.value(
            _FakeBlockchainIdentity_18(
          this,
          Invocation.method(
            #getIdentity,
            [address],
          ),
        )),
      ) as _i14.Future<_i10.BlockchainIdentity>);
  @override
  _i14.Future<dynamic> getRpcRequest({
    required String? method,
    required List<dynamic>? params,
    required String? chain,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRpcRequest,
          [],
          {
            #method: method,
            #params: params,
            #chain: chain,
          },
        ),
        returnValue: _i14.Future<dynamic>.value(),
      ) as _i14.Future<dynamic>);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i31.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  String? getString(
    String? key, {
    String? defaultValue,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
        {#defaultValue: defaultValue},
      )) as String?);
  @override
  _i14.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
  @override
  _i14.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i14.Future<void>.value(),
        returnValueForMissingStub: _i14.Future<void>.value(),
      ) as _i14.Future<void>);
  @override
  _i14.Future<bool> clearKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #clearKey,
          [key],
        ),
        returnValue: _i14.Future<bool>.value(false),
      ) as _i14.Future<bool>);
}

/// A class which mocks [WidgetStack].
///
/// See the documentation for Mockito's code generation for more information.
class MockWidgetStack extends _i1.Mock implements _i32.WidgetStack {
  MockWidgetStack() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<bool> get onRenderScreen => (super.noSuchMethod(
        Invocation.getter(#onRenderScreen),
        returnValue: _FakeValueNotifier_0<bool>(
          this,
          Invocation.getter(#onRenderScreen),
        ),
      ) as _i2.ValueNotifier<bool>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i11.Widget getCurrent() => (super.noSuchMethod(
        Invocation.method(
          #getCurrent,
          [],
        ),
        returnValue: _FakeWidget_19(
          this,
          Invocation.method(
            #getCurrent,
            [],
          ),
        ),
      ) as _i11.Widget);
  @override
  void push(
    _i11.Widget? widget, {
    bool? renderScreen = false,
    _i33.AnalyticsEvent? event,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #push,
          [widget],
          {
            #renderScreen: renderScreen,
            #event: event,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pop() => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void popUntil(_i2.Key? key) => super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [key],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popAllAndPush(
    _i11.Widget? widget, {
    bool? renderScreen = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popAllAndPush,
          [widget],
          {#renderScreen: renderScreen},
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool containsKey(_i2.Key? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addDefault() => super.noSuchMethod(
        Invocation.method(
          #addDefault,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
